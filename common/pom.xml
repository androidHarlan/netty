<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2012 The Netty Project
  ~
  ~ The Netty Project licenses this file to you under the Apache License,
  ~ version 2.0 (the "License"); you may not use this file except in compliance
  ~ with the License. You may obtain a copy of the License at:
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  ~ License for the specific language governing permissions and limitations
  ~ under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.netty</groupId>
    <artifactId>netty-parent</artifactId>
    <version>5.0.0.Alpha3-SNAPSHOT</version>
  </parent>

  <artifactId>netty-common</artifactId>
  <packaging>jar</packaging>

  <name>Netty/Common</name>

  <properties>
    <collection.template.dir>${project.basedir}/src/main/templates</collection.template.dir>
    <collection.template.test.dir>${project.basedir}/src/test/templates</collection.template.test.dir>
    <collection.src.dir>${project.build.directory}/generated-sources/collections/main/java</collection.src.dir>
    <collection.testsrc.dir>${project.build.directory}/generated-sources/collections/test/java</collection.testsrc.dir>
  </properties>

  <dependencies>
    <!-- Byte code generator - completely optional -->
    <dependency>
      <groupId>org.javassist</groupId>
      <artifactId>javassist</artifactId>
      <scope>compile</scope> <!-- override the 'test' scope defined at parent pom.xml -->
      <optional>true</optional>
    </dependency>

    <!-- Logging frameworks - completely optional -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <build>
    <plugins>

      <!-- Add generated collection sources. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.9.1</version>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${collection.src.dir}</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${collection.testsrc.dir}</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Generate the primitive collections from the template files. -->
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>groovy-maven-plugin</artifactId>
        <version>2.0</version>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>2.4.3</version>
          </dependency>
          <dependency>
            <groupId>ant</groupId>
            <artifactId>ant-optional</artifactId>
            <version>1.5.3-1</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>generate-collections</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <source>
                String[] templateDirs = ["${collection.template.dir}",
                                         "${collection.template.test.dir}"]
                String[] outputDirs = ["${collection.src.dir}",
                                       "${collection.testsrc.dir}"]

                templateDirs.eachWithIndex { templateDir, i ->
                  convertSources templateDir, outputDirs[i]
                }

                void convertSources(String templateDir, String outputDir) {
                  String[] keyPrimitives = ["int", "char"]
                  String[] keyObjects = ["Integer", "Character"];

                  keyPrimitives.eachWithIndex { keyPrimitive, i ->
                    convertTemplates templateDir, outputDir, keyPrimitive, keyObjects[i]
                  }
                }

                void convertTemplates(String templateDir,
                                      String outputDir,
                                      String keyPrimitive,
                                      String keyObject) {
                  def keyName = keyPrimitive.capitalize()
                  def replaceFrom = "^(.*)K([a-zA-Z]+).template\$\$"
                  def replaceTo = "\\1" + keyName + "\\2.java"
                  ant.copy(todir: outputDir) {
                    fileset(dir: templateDir) {
                      include(name: "**/*.template")
                    }
                    filterset() {
                      filter(token: "K", value: keyName)
                      filter(token: "k", value: keyPrimitive)
                      filter(token: "O", value: keyObject)
                    }
                    regexpmapper(from: replaceFrom, to: replaceTo)
                  }
                }
              </source>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

