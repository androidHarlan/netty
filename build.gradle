// apply plugins for all projects.
allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'checkstyle'
	apply plugin: 'findbugs'
	apply plugin: 'maven-publish'
	if (name == 'transport-native-epoll') {
		apply plugin: 'c'
	}
}

// ================================================
// defines constants.
// since this is the 'all-in-one' build script,
// there's no need to use ext block.

def groupId     = 'io.netty'
def versionName = '5.0.0.Alpha2-SNAPSHOT'

def defaultCharset = 'UTF-8'

def jboss_marshalling_version = '1.3.18.GA'

def jetty_npn_version = '1.1.9.v20141016'
//def jetty_npn_path = "${settings.localRepository}/org/mortbay/jetty/npn/npn-boot/${jetty.npn.version}/npn-boot-${jetty.npn.version}.jar"

def jetty_alpn_version = '8.1.2.v20141202'
//def jetty_alpn_path = "${settings.localRepository}/org/mortbay/jetty/alpn/alpn-boot/${jetty.alpn.version}/alpn-boot-${jetty.alpn.version}.jar"

def argLine_common = [
	'-server',
	'-dsa -da -ea:io.netty...',
	'-XX:+AggressiveOpts',
	'-XX:+TieredCompilation',
	'-XX:+UseBiasedLocking',
	'-XX:+UseFastAccessorMethods',
	'-XX:+OptimizeStringConcat',
	'-XX:+HeapDumpOnOutOfMemoryError'
]
//def argLine_bootcp = "-Xbootclasspath/p:${jetty_alpn_path}"
def argLine_leak     = '-verbose:gc'
def argLine_coverage = '-D_'


// ================================================
// defines manifest information.

def defaultManifest = [
	'Url':'http://netty.io/',
	'Email': 'netty@googlegroups.com'
]

def jarManifest        = defaultManifest
def sourceJarManifest  = defaultManifest
def javadocJarManifest = defaultManifest


// ================================================
// defines repositories' information.

def repos = [
	// used for resolve dependencies
	'mavenDependencies': [
		''
	],
	// used for distribute artifacts
	'mavenDistribute': [
		''
	]
]


// ================================================
// defines all the denpendencies.
// include third party libraries and netty modules.

// gradle support transitive dependency
// these are module paths(not names)
def moduleDependencies = [
	':buffer':                 [':common'],
	':codec':                  [':transport'],
	':codec-dns':              [':codec'],
	':codec-haproxy':          [':codec'],
	':codec-http':             [':handler'],
	':codec-http2':            [':codec-http'],
	':codec-memcache':         [':codec'],
	':codec-mqtt':             [':codec'],
	':codec-socks':            [':codec'],
	':codec-stomp':            [':codec'],
	':handler':                [':codec'],
	':handler-proxy':          [':codec-socks', ':codec-http'],
	':resolver':               [':common'],
	':resolver-dns':           [':codec-dns'],
	':transport':              [':buffer', ':resolver'],
	':transport-native-epoll': [':transport'],
	':transport-rxtx':         [':transport'],
	':transport-sctp':         [':codec'],
	':transport-udt':          [':transport'],

	':example':                [':transport-sctp', ':handler-proxy', ':codec-memcache', ':codec-http2', ':codec-stomp'],
	':microbench':             [':codec-http'],
	':testsuite':              [':transport-sctp', ':codec-http', ':transport-udt']
]

def extraDependencies = [
	// Byte code generator - completely optional
	'javassist': [
		'groupId'   : 'org.javassist',
		'artifactId': 'javassist',
		'version'   : '3.18.0-GA'
	],
	// JBoss Marshalling - completely optional
	'jboss-marshalling': [
		'groupId'   : 'org.jboss.marshalling',
		'artifactId': 'jboss-marshalling',
		'version'   : jboss_marshalling_version
	],
	// SPDY and HTTP/2 - completely optional
	'hpack': [
		'groupId'   : 'com.twitter',
		'artifactId': 'hpack',
		'version'   : '0.10.0'
	],
	'npn-api': [
		'groupId'   : 'org.eclipse.jetty.npn',
		'artifactId': 'npn-api',
		'version'   : '1.1.1.v20141010'
	],
	'npn-boot': [
		'groupId'   : 'org.mortbay.jetty.npn',
		'artifactId': 'npn-boot',
		'version'   : jetty_npn_version
	],
	'alpn-api': [
		'groupId'   : 'org.eclipse.jetty.alpn',
		'artifactId': 'alpn-api',
		'version'   : '1.1.0.v20141014'
	],
	'alpn-boot': [
		'groupId'   : 'org.mortbay.jetty.alpn',
		'artifactId': 'alpn-boot',
		'version'   : jetty_alpn_version
	],
	// Google Protocol Buffers - completely optional
	'protobuf-java': [
		'groupId'   : 'com.google.protobuf',
		'artifactId': 'protobuf-java',
		'version'   : '2.5.0'
	],
	// Our own Tomcat Native fork - completely optional, used for acclerating SSL with OpenSSL
	'netty-tcnative': [
		'groupId'   : 'io.netty',
		'artifactId': 'netty-tcnative',
		'version'   : '1.1.32.Fork1'
	],
	// Bouncy Castle - completely optional, only needed when:
	// - you generate a temporary self-signed certificate using SelfSignedCertificate, and
    // - you don't use the JDK which doesn't provide sun.security.x509 package.
	'bcpkix-jdk15on': [
		'groupId'   : 'org.bouncycastle',
		'artifactId': 'bcpkix-jdk15on',
		'version'   : '1.50'
	],
	'jzlib': [
		'groupId'   : 'com.jcraft',
		'artifactId': 'jzlib',
		'version'   : '1.1.2'
	],
	'compress-lzf': [
		'groupId'   : 'com.ning',
		'artifactId': 'compress-lzf',
		'version'   : '1.0.1'
	],
	'lz4': [
		'groupId'   : 'net.jpountz.lz4',
		'artifactId': 'lz4',
		'version'   : '1.2.0'
	],
	'lzma-java': [
		'groupId'   : 'com.github.jponge',
		'artifactId': 'lzma-java',
		'version'   : '1.3'
	],
	'rxtx': [
		'groupId'   : 'org.rxtx',
		'artifactId': 'rxtx',
		'version'   : '2.1.7'
	],
	'barchart-udt-bundle': [
		'groupId': 'com.barchart.udt',
		'artifactId': 'barchart-udt-bundle',
		'version': '2.3.0'
	],
	'servlet-api': [
		'groupId'   : 'javax.servlet',
		'artifactId': 'servlet-api',
		'version'   : '2.5'
	],
	'slf4j-api': [
		'groupId'   : 'org.slf4j',
		'artifactId': 'slf4j-api',
		'version'   : '1.7.5'
	],
	'commons-logging': [
		'groupId': 'commons-logging',
		'artifactId': 'commons-logging',
		'version': '1.1.3'
	],
	'log4j': [
		'groupId'   : 'log4j',
		'artifactId': 'log4j',
		'version'   : '1.2.17'
	],
	// Metrics providers
	'metrics-core': [
		'groupId'   : 'com.yammer.metrics',
		'artifactId': 'metrics-core',
		'version'   : '2.2.0'
	],
	// Common test dependencies
	'junit': [
		'groupId'   : 'junit',
		'artifactId': 'junit',
		'version'   : '4.11'
	],
	'hamcrest-library': [
		'groupId'   : 'org.hamcrest',
		'artifactId': 'hamcrest-library',
		'version'   : '1.3'
	],
	'easymock': [
		'groupId'   : 'org.easymock',
		'artifactId': 'easymock',
		'version'   : '3.2'
	],
	'easymockclassextension': [
		'groupId'   : 'org.easymock',
		'artifactId': 'easymockclassextension',
		'version'   : '3.2'
	],
	'jmock-junit4': [
		'groupId'   : 'org.jmock',
		'artifactId': 'jmock-junit4',
		'version'   : '2.6.0'
	],
	'mockito-core': [
		'groupId'   : 'org.mockito',
		'artifactId': 'mockito-core',
		'version'   : '1.10.8'
	],
	'logback-classic': [
		'groupId'   : 'ch.qos.logback',
		'artifactId': 'logback-classic',
		'version'   : '1.0.13'
	],
	// Test dependencies for jboss marshalling encoder/decoder
	'jboss-marshalling-serial': [
		'groupId'   : 'org.jboss.marshalling',
		'artifactId': 'jboss-marshalling-serial',
		'version'   : jboss_marshalling_version
	],
	'jboss-marshalling-river': [
		'groupId'   : 'org.jboss.marshalling',
		'artifactId': 'jboss-marshalling-river',
		'version'   : jboss_marshalling_version
	],
	// Test dependencies for microbench
	'caliper': [
		'groupId'   : 'com.google.caliper',
		'artifactId': 'caliper',
		'version'   : '0.5-rc1'
	],
	// Test dependency for Bzip2Decoder
	'commons-compress': [
		'groupId'   : 'org.apache.commons',
		'artifactId': 'commons-compress',
		'version'   : '1.8.1'
	],
	// Test suite dependency for generating a compressed heap dump file
	'xz': [
		'groupId'   : 'org.tukaani',
		'artifactId': 'xz',
		'version'   : '1.5'
	]
]


// ================================================
// defins common functions/variables for later use

// 'netty-all' for root project and 'netty-xxx' for sub modules
def getBaseName(aProject) {
	if (aProject == rootProject) {
		'netty-all'
	} else {
		"netty-${aProject.name}"
	}
}

// all modules that need to be assembled, except for 'microbench' and 'testsuite'
def assembleModules = subprojects.findAll {
	def n = it.name.toLowerCase(Locale.US)
	n != 'microbench' && n != 'testsuite'
}

// all source code from sub modules
def assembleModuleSources = assembleModules*.sourceSets.main.allJava

// all classes compiled by sub modules
def assembleModuleClasses = assembleModules*.sourceSets.main.output.classesDir


// ================================================
// all project configurations

allprojects {
	group = groupId
	version = versionName

	archivesBaseName = getBaseName(project)

	sourceCompatibility = 1.6
	targetCompatibility = 1.7

	def isRootProject = project == rootProject

	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		extraDependencies.each { k, v ->
			def lib = "${v.groupId}:${v.artifactId}:${v.version}"
			compile lib
			testCompile lib
		}

		moduleDependencies[path]?.each {
			compile project(it)
		}
	}

	checkstyle {
		ignoreFailures = true
		configFile = rootProject.file('checkstyle.xml')
	}

	findbugs {
		ignoreFailures = true
	}

	publishing {
		publications {
			maven(MavenPublication) {
				from components.java
				//artifact packageSource
				//artifact packageJavadoc
			}
		}

		repositories {
			maven {
				url "${rootProject.buildDir}/repo"
			}
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = defaultCharset
		options.warnings = false
	}

	tasks.withType(Javadoc) {
		options.encoding = defaultCharset
		options.quiet()
		failOnError = false
		if (isRootProject) {
			source = assembleModuleSources
		}
	}

	// assemble javadocs
	task packageJavadoc(type: Jar, dependsOn: javadoc, group: 'Package') {
		classifier = 'javadoc'
		from "${buildDir}/docs/javadoc"
		exclude 'com'
		destinationDir = file("${buildDir}/docs")
	}

	// assemble sources
	task packageSource(type: Jar, group: 'Package') {
		classifier = 'sources'
		if (isRootProject) {
			from assembleModuleSources
		} else {
			from sourceSets.main.allJava
		}
		include 'io/netty/**/*'
		destinationDir = file("${buildDir}/sources")
	}
}


// ================================================
// root project configurations

// root project jar task, assemble all sub modules' classes
jar {
	from assembleModuleClasses
	exclude 'com'
	destinationDir = file("${buildDir}/libs")
}

// root project jar task based on classes that compiled by all sub modules
// so it must run after all sub modules
def rootJarTask = getTasksByName('jar', false).getAt(0)
rootJarTask.dependsOn = getTasksByName('jar', true) - rootJarTask

// package all binaries/sources/javadocs
task packageAll(type:Zip, group: 'Package') {
	dependsOn = [jar, packageSource, packageJavadoc]
	destinationDir = file("${buildDir}")
	allprojects.each {
		"${buildDir}/libs/${archiveName}.jar"
	}
}

// use gradle wrapper
task wrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}
